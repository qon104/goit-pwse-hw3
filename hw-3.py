import os
import shutil
import time
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor, as_completed
from multiprocessing import Pool, cpu_count

# =====================================================================
#                –ß–ê–°–¢–ò–ù–ê 1 ‚Äî –°–û–†–¢–£–í–ê–ù–ù–Ø –§–ê–ô–õ–Ü–í (–ü–û–¢–û–ö–ò)
# =====================================================================

def copy_file(file_path: Path, target_dir: Path):
    """–ö–æ–ø—ñ—é—î —Ñ–∞–π–ª —É –ø—ñ–¥–ø–∞–ø–∫—É –∑–∞ –π–æ–≥–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º."""
    try:
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É, —è–∫—â–æ –Ω–µ–º–∞—î ‚Äî –∫–ª–∞–¥–µ–º–æ –≤ "unknown"
        ext = file_path.suffix.lower()[1:] if file_path.suffix else "unknown"
        ext_dir = target_dir / ext
        ext_dir.mkdir(parents=True, exist_ok=True)

        # –ö–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª —É –ø–æ—Ç—Ä—ñ–±–Ω—É –ø–∞–ø–∫—É
        shutil.copy2(file_path, ext_dir / file_path.name)
        print(f"‚úî –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ: {file_path} ‚Üí {ext_dir}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è {file_path}: {e}")


def collect_files(src_dir: Path):
    """–ó–±–∏—Ä–∞—î —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤ —É –ø–∞–ø—Ü—ñ —Ç–∞ –ø—ñ–¥–ø–∞–ø–∫–∞—Ö."""
    files = []
    for root, _, filenames in os.walk(src_dir):
        for name in filenames:
            files.append(Path(root) / name)
    return files


def sort_files_by_extension():
    """–ó–∞–ø—É—Å–∫–∞—î —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º–∏ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –ø–æ—Ç–æ–∫—ñ–≤."""
    print("\n=== –°–û–†–¢–£–í–ê–ù–ù–Ø –§–ê–ô–õ–Ü–í ===")
    src_path = input("–í–≤–µ–¥—ñ—Ç—å —à–ª—è—Ö –¥–æ –≤–∏—Ö—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏: ").strip()
    target_path = input("–í–≤–µ–¥—ñ—Ç—å —à–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è (Enter = dist): ").strip() or "dist"

    src_dir = Path(src_path)
    target_dir = Path(target_path)

    if not src_dir.exists() or not src_dir.is_dir():
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –ø–∞–ø–∫–∞ {src_dir} –Ω–µ —ñ—Å–Ω—É—î!")
        return

    files = collect_files(src_dir)
    print(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª—ñ–≤. –ü–æ—á–∏–Ω–∞—é –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è...\n")

    start = time.time()
    with ThreadPoolExecutor(max_workers=8) as executor:
        futures = [executor.submit(copy_file, file, target_dir) for file in files]
        for future in as_completed(futures):
            future.result()

    print(f"\n‚úÖ –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {time.time() - start:.2f} —Å–µ–∫.")


# =====================================================================
#                –ß–ê–°–¢–ò–ù–ê 2 ‚Äî FACTORIZE (–ü–†–û–¶–ï–°–ò)
# =====================================================================

def find_divisors(number: int):
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å —É—Å—ñ –¥—ñ–ª—å–Ω–∏–∫–∏ —á–∏—Å–ª–∞."""
    return [i for i in range(1, number + 1) if number % i == 0]


def factorize_sync(*numbers):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤–µ—Ä—Å—ñ—è factorize."""
    results = []
    for number in numbers:
        results.append(find_divisors(number))
    return results


def factorize_parallel(*numbers):
    """–ü–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –≤–µ—Ä—Å—ñ—è factorize –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –ø—Ä–æ—Ü–µ—Å—ñ–≤."""
    with Pool(cpu_count()) as pool:
        results = pool.map(find_divisors, numbers)
    return results


def run_factorize():
    """–ó–∞–ø—É—Å–∫–∞—î –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –¥—ñ–ª—å–Ω–∏–∫—ñ–≤ —ñ–∑ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è–º —á–∞—Å—É."""
    print("\n=== –û–ë–ß–ò–°–õ–ï–ù–ù–Ø –î–Ü–õ–¨–ù–ò–ö–Ü–í ===")
    nums = input("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª: ").strip()
    numbers = tuple(map(int, nums.split()))

    # --- –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤–µ—Ä—Å—ñ—è ---
    print("\nüîπ –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤–µ—Ä—Å—ñ—è:")
    start = time.time()
    results_sync = factorize_sync(*numbers)
    sync_time = time.time() - start
    for num, divisors in zip(numbers, results_sync):
        print(f"–ß–∏—Å–ª–æ {num}: {divisors}")
    print(f"‚è± –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {sync_time:.2f} —Å–µ–∫")

    # --- –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –≤–µ—Ä—Å—ñ—è ---
    print("\nüîπ –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –≤–µ—Ä—Å—ñ—è:")
    start = time.time()
    results_parallel = factorize_parallel(*numbers)
    parallel_time = time.time() - start
    for num, divisors in zip(numbers, results_parallel):
        print(f"–ß–∏—Å–ª–æ {num}: {divisors}")
    print(f"‚è± –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {parallel_time:.2f} —Å–µ–∫")

    # --- –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ ---
    speedup = sync_time / parallel_time if parallel_time > 0 else 1
    print(f"\n‚ö° –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è: —É {speedup:.2f} —Ä–∞–∑—ñ–≤ —à–≤–∏–¥—à–µ!")


# =====================================================================
#                –ú–ï–ù–Æ –ü–†–û–ì–†–ê–ú–ò
# =====================================================================

def main_menu():
    while True:
        print("\n" + "="*50)
        print("        –î–û–ú–ê–®–ù–Ñ –ó–ê–í–î–ê–ù–ù–Ø ‚Ññ3")
        print("="*50)
        print("1 ‚Äî –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º–∏ (–ø–æ—Ç–æ–∫–∏)")
        print("2 ‚Äî Factorize (–ø–æ—à—É–∫ –¥—ñ–ª—å–Ω–∏–∫—ñ–≤, –ø—Ä–æ—Ü–µ—Å–∏)")
        print("3 ‚Äî –í–∏—Ö—ñ–¥")
        print("="*50)

        choice = input("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é: ").strip()

        if choice == "1":
            sort_files_by_extension()
        elif choice == "2":
            run_factorize()
        elif choice == "3":
            print("üëã –í–∏—Ö—ñ–¥ —ñ–∑ –ø—Ä–æ–≥—Ä–∞–º–∏.")
            break
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞: –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ 1, 2 –∞–±–æ 3.")


if __name__ == "__main__":
    main_menu()
